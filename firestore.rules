rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -----------------------------
    // Helpers
    // -----------------------------
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function userDoc(uid) {
      return get(/databases/$(database)/documents/users/$(uid));
    }
    function isClient(uid) {
      return isSignedIn() && userDoc(uid).data.userType == 'client';
    }
    function isFreelancer(uid) {
      return isSignedIn() && userDoc(uid).data.userType == 'freelancer';
    }
    // Safe for document reads; avoid relying on this for queries.
    function projectDoc(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId));
    }

    // -----------------------------
    // Users: each user manages their own doc
    // -----------------------------
    match /users/{userId} {
      // Allow reading freelancer profiles by any signed-in user (for browsing)
      // And allow users to read their own profiles
      allow read: if isSignedIn();
      
      // Allow any signed-in user to create users (for testing)
      // In production, restrict this to isOwner(userId)
      allow create: if isSignedIn();
      
      allow update, delete: if isOwner(userId);
    }

    // -----------------------------
    // Jobs
    // -----------------------------
    match /jobs/{jobId} {
      allow read: if isSignedIn();

      // Create by the signed-in client (path-based auth)
      allow create: if isSignedIn() &&
                    request.resource.data.clientId == request.auth.uid;

      // Only the job owner can modify
      allow update, delete: if isSignedIn() &&
                            resource.data.clientId == request.auth.uid;

      // (Optional) legacy nested proposals kept for compatibility
      match /proposals/{proposalId} {
        allow read: if isSignedIn() &&
          (resource.data.freelancerId == request.auth.uid ||
           resource.data.clientId == request.auth.uid);
        allow create: if isSignedIn() &&
          request.resource.data.freelancerId == request.auth.uid;
        allow update, delete: if isSignedIn() &&
          (resource.data.clientId == request.auth.uid ||
           resource.data.freelancerId == request.auth.uid);
      }
    }

    // -----------------------------
    // Proposals (top-level, used by your UI)
    // -----------------------------
    match /proposals/{proposalId} {
      allow read: if isSignedIn() &&
        (resource.data.freelancerId == request.auth.uid ||
         resource.data.clientId == request.auth.uid);

      allow create: if isSignedIn() &&
        request.resource.data.freelancerId == request.auth.uid;

      // Allow write (covers update) for batch operations during approval
      allow write: if isSignedIn() &&
        (request.resource.data.clientId == request.auth.uid ||
         request.resource.data.freelancerId == request.auth.uid);

      allow update, delete: if isSignedIn() &&
        (resource.data.clientId == request.auth.uid ||
         resource.data.freelancerId == request.auth.uid);
    }

    // -----------------------------
    // Projects (created when a proposal is approved OR portfolio items by freelancers)
    // -----------------------------
    match /projects/{projectId} {
      // Allow any signed-in user to create projects (for testing)
      // In production, restrict this to specific conditions
      allow create: if isSignedIn();

      // Allow any signed-in user to read projects (especially portfolio items)
      allow read: if isSignedIn();
      
      // More specific create rule (keep for reference)
      // allow create: if isSignedIn() && (
      //   request.resource.data.clientId == request.auth.uid ||
      //   (request.resource.data.freelancerId == request.auth.uid && 
      //    request.resource.data.isPortfolioItem == true)
      // );

      // Write (covers both create and update) - allow if user is the client in the data
      // OR if user is a freelancer creating/updating their portfolio item
      // This handles batch.set() with merge:true during proposal approval
      allow write: if isSignedIn() && (
        request.resource.data.clientId == request.auth.uid ||
        (request.resource.data.freelancerId == request.auth.uid && 
         request.resource.data.isPortfolioItem == true) ||
        // Allow freelancers to update project status for completion requests
        (resource.data.freelancerId == request.auth.uid)
      );

      // Update by participants (for existing projects) 
      // Allow freelancers to update project status and completion fields
      allow update: if isSignedIn() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.freelancerId == request.auth.uid
      );

      // Delete by participants (keep doc-based check)
      allow delete: if isSignedIn() &&
        (resource.data.clientId == request.auth.uid ||
         resource.data.freelancerId == request.auth.uid);

      // Segments under a project
      match /segments/{segmentId} {
        // Read if listed on the segment OR a participant via parent
        allow read: if isSignedIn() && (
          (resource.data.clientId == request.auth.uid ||
           resource.data.freelancerId == request.auth.uid) ||
          projectDoc(projectId).data.clientId == request.auth.uid ||
          projectDoc(projectId).data.freelancerId == request.auth.uid
        );

        // Create if caller is the project freelancer OR segment declares them
        allow create: if isSignedIn() && (
          projectDoc(projectId).data.freelancerId == request.auth.uid ||
          request.resource.data.freelancerId == request.auth.uid
        );

        // Update/Delete by parent project participants
        allow update, delete: if isSignedIn() && (
          projectDoc(projectId).data.clientId == request.auth.uid ||
          projectDoc(projectId).data.freelancerId == request.auth.uid
        );
      }
      
      // Completions under a project (for project completion requests)
      match /completions/{completionId} {
        // Read by project participants
        allow read: if isSignedIn() && (
          (resource.data.clientId == request.auth.uid ||
           resource.data.freelancerId == request.auth.uid) ||
          projectDoc(projectId).data.clientId == request.auth.uid ||
          projectDoc(projectId).data.freelancerId == request.auth.uid
        );

        // Create by project freelancer (for submitting completion requests)
        allow create: if isSignedIn() && (
          projectDoc(projectId).data.freelancerId == request.auth.uid ||
          request.resource.data.freelancerId == request.auth.uid
        );

        // Update by project participants (for client approval/rejection)
        allow update, delete: if isSignedIn() && (
          projectDoc(projectId).data.clientId == request.auth.uid ||
          projectDoc(projectId).data.freelancerId == request.auth.uid
        );
      }
    }

    // -----------------------------
    // Chats and Messages (Enhanced) - Simplified for testing
    // -----------------------------
    match /chats/{chatId} {
      // Allow any signed-in user to read chats they participate in
      allow read: if isSignedIn() && (
        resource.data.participants != null &&
        request.auth.uid in resource.data.participants
      );
      
      // Allow any signed-in user to create chats where they are a participant
      allow create: if isSignedIn() && (
        request.resource.data.participants != null &&
        request.auth.uid in request.resource.data.participants
      );
      
      // Allow participants to update chat metadata
      allow update: if isSignedIn() && (
        resource.data.participants != null &&
        request.auth.uid in resource.data.participants
      );
      
      // Allow participants to delete (though this might not be needed)
      allow delete: if isSignedIn() && (
        resource.data.participants != null &&
        request.auth.uid in resource.data.participants
      );

      match /messages/{messageId} {
        // Allow chat participants to read messages
        allow read: if isSignedIn();
        
        // Allow message creation if user is the sender
        allow create: if isSignedIn() && 
          request.resource.data.senderId == request.auth.uid;
        
        // Allow message updates by sender
        allow update: if isSignedIn() && 
          resource.data.senderId == request.auth.uid;
        
        // Allow sender to delete their own messages
        allow delete: if isSignedIn() && 
          resource.data.senderId == request.auth.uid;
      }
      
      // Message attachments subcollection - simplified
      match /attachments/{attachmentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && 
          request.resource.data.uploadedBy == request.auth.uid;
        allow update, delete: if isSignedIn();
      }
    }

    // -----------------------------
    // User Connections (for connected freelancers/clients) - Simplified
    // -----------------------------
    match /connections/{userId} {
      // Allow any signed-in user to read and write connections
      allow read, write: if isSignedIn();
      
      // Connected users subcollection - simplified
      match /connectedUsers/{connectionId} {
        allow read, write: if isSignedIn();
      }
    }

    // -----------------------------
    // File Uploads Metadata
    // -----------------------------
    match /fileUploads/{fileId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && 
        request.resource.data.uploadedBy == request.auth.uid;
      allow delete: if isSignedIn() && 
        resource.data.uploadedBy == request.auth.uid;
    }

    // -----------------------------
    // User Presence (for online status)
    // -----------------------------
    match /presence/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // -----------------------------
    // Notifications
    // -----------------------------
    match /notifications/{notifId} {
      // Allow users to read their own notifications
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Allow any signed-in user to create notifications (for cross-user messaging notifications)
      allow create: if isSignedIn() && request.resource.data.userId != null;
      
      // Allow users to update/delete their own notifications
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // -----------------------------
    // Collection Group Queries (for segments across projects)
    // -----------------------------
    match /{path=**}/segments/{segmentId} {
      allow read: if isSignedIn() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.freelancerId == request.auth.uid
      );
    }
  }
}
